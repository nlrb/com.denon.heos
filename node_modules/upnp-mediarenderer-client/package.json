{
  "_args": [
    [
      {
        "raw": "upnp-mediarenderer-client@git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
        "scope": null,
        "escapedName": "upnp-mediarenderer-client",
        "name": "upnp-mediarenderer-client",
        "rawSpec": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
        "spec": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:athombv/node-upnp-mediarenderer-client.git#production",
          "sshUrl": "git+ssh://git@github.com/athombv/node-upnp-mediarenderer-client.git#production",
          "httpsUrl": "git+https://github.com/athombv/node-upnp-mediarenderer-client.git#production",
          "gitUrl": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
          "shortcut": "github:athombv/node-upnp-mediarenderer-client#production",
          "directUrl": "https://raw.githubusercontent.com/athombv/node-upnp-mediarenderer-client/production/package.json"
        }
      },
      "/Users/baskiers/athom/com.denon.heos/node_modules/homey-upnp-mediarenderer"
    ]
  ],
  "_from": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
  "_id": "upnp-mediarenderer-client@1.2.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/upnp-mediarenderer-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "upnp-mediarenderer-client@git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
    "scope": null,
    "escapedName": "upnp-mediarenderer-client",
    "name": "upnp-mediarenderer-client",
    "rawSpec": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
    "spec": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:athombv/node-upnp-mediarenderer-client.git#production",
      "sshUrl": "git+ssh://git@github.com/athombv/node-upnp-mediarenderer-client.git#production",
      "httpsUrl": "git+https://github.com/athombv/node-upnp-mediarenderer-client.git#production",
      "gitUrl": "git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
      "shortcut": "github:athombv/node-upnp-mediarenderer-client#production",
      "directUrl": "https://raw.githubusercontent.com/athombv/node-upnp-mediarenderer-client/production/package.json"
    }
  },
  "_requiredBy": [
    "/homey-upnp-mediarenderer"
  ],
  "_resolved": "git://github.com/athombv/node-upnp-mediarenderer-client.git#52fba4d97724dacb59aa33a8061670fdeb54f685",
  "_shasum": "2e7d6ae50188df91dbd2330512ec636431e6a5f9",
  "_shrinkwrap": null,
  "_spec": "upnp-mediarenderer-client@git://github.com/athombv/node-upnp-mediarenderer-client.git#production",
  "_where": "/Users/baskiers/athom/com.denon.heos/node_modules/homey-upnp-mediarenderer",
  "author": {
    "name": "thibauts"
  },
  "bugs": {
    "url": "https://github.com/athombv/node-upnp-mediarenderer-client/issues"
  },
  "dependencies": {
    "debug": "^2.1.3",
    "elementtree": "^0.1.6",
    "upnp-device-client": "git://github.com/athombv/node-upnp-device-client.git#production"
  },
  "description": "An UPnP/DLNA MediaRenderer client",
  "devDependencies": {},
  "gitHead": "52fba4d97724dacb59aa33a8061670fdeb54f685",
  "homepage": "https://github.com/athombv/node-upnp-mediarenderer-client#readme",
  "keywords": [
    "upnp",
    "dlna",
    "mediarenderer",
    "tv"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "upnp-mediarenderer-client",
  "optionalDependencies": {},
  "readme": "upnp-mediarenderer-client\n=========================\n### An UPnP/DLNA MediaRenderer client\n\nThis module allows you to control an UPnP/DLNA MediaRenderer directly (usually your TV set). It implements load, play, pause, stop and seek commands.\n\nEvents coming from the MediaRenderer (ie. fired from the TV remote) such as `playing`, `paused`, `stopped` can be listened to.\n\nExternal subtitles are supported through DIDL-Lite metadata, but be aware that some MediaRenderers require the HTTP server serving the media file to return specific headers as illustrated in this [gist](https://gist.github.com/thibauts/5f5f8d8ce6566c8289e6). Also, some MediaRenderers don't support external subtitles at all.\n\nInstallation\n------------\n\n```bash\n$ npm install upnp-mediarenderer-client\n```\n\nUsage\n-----\n\n```javascript\nvar MediaRendererClient = require('upnp-mediarenderer-client');\n\n// Instanciate a client with a device description URL (discovered by SSDP)\nvar client = new MediaRendererClient('http://192.168.1.50:4873/foo.xml');\n\n// Load a stream with subtitles and play it immediately\nvar options = { \n  autoplay: true,\n  contentType: 'video/avi',\n  metadata: {\n    title: 'Some Movie Title',\n    creator: 'John Doe',\n    type: 'video', // can be 'video', 'audio' or 'image'\n    subtitlesUrl: 'http://url.to.some/subtitles.srt'\n  }\n};\n\nclient.load('http://url.to.some/stream.avi', options, function(err, result) {\n  if(err) throw err;\n  console.log('playing ...');\n});\n\n// Pause the current playing stream\nclient.pause();\n\n// Unpause\nclient.play();\n\n// Stop\nclient.stop();\n\n// Seek to 10 minutes\nclient.seek(10 * 60);\n\nclient.on('status', function(status) {\n  // Reports the full state of the AVTransport service the first time it fires,\n  // then reports diffs. Can be used to maintain a reliable copy of the\n  // service internal state.\n  console.log(status);\n});\n\nclient.on('loading', function() {\n  console.log('loading');\n});\n\nclient.on('playing', function() {\n  console.log('playing');\n\n  client.getPosition(function(err, position) {\n    console.log(position); // Current position in seconds\n  });\n\n  client.getDuration(function(err, duration) {\n    console.log(duration); // Media duration in seconds\n  });\n});\n\nclient.on('paused', function() {\n  console.log('paused');\n});\n\nclient.on('stopped', function() {\n  console.log('stopped');\n});\n\nclient.on('speedChanged', function(speed) {\n  // Fired when the user rewinds of fast-forwards the media from the remote\n  console.log('speedChanged', speed);\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/athombv/node-upnp-mediarenderer-client.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.2.4"
}
